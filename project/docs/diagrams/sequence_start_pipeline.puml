@startuml
title Sequence Diagram: Start Processing a Post

actor User
participant "Sidebar UI" as UI
participant "Orchestration\nService" as ServiceWorker
participant "DOM Interactor" as ContentScript
database "Browser Storage" as Storage
participant "OpenRouter API" as API

User -> UI : Clicks "Start"
UI -> ServiceWorker : sendMessage({ type: 'START_PIPELINE', postId: '...' })

ServiceWorker -> Storage : Load state for postId
Storage --> ServiceWorker : Returns existing or new state JSON

ServiceWorker -> ServiceWorker : Identify next comment to process
ServiceWorker -> ContentScript : sendMessage({ type: 'CLICK_LIKE', commentId: '...' })
ContentScript -> ContentScript : Finds and clicks Like button
ContentScript --> ServiceWorker : Response({ success: true })

ServiceWorker -> Storage : Update comment likeStatus to 'DONE'
ServiceWorker -> UI : sendMessage({ type: 'STATE_UPDATE', ... })

ServiceWorker -> ContentScript : sendMessage({ type: 'GET_COMMENT_TEXT', commentId: '...' })
ContentScript --> ServiceWorker : Response({ text: '...' })

ServiceWorker -> API : POST /chat/completions (with comment text)
API --> ServiceWorker : AI-generated reply text

ServiceWorker -> ContentScript : sendMessage({ type: 'SUBMIT_REPLY', commentId: '...', text: '...' })
ContentScript -> ContentScript : Types and submits reply
ContentScript --> ServiceWorker : Response({ success: true })

ServiceWorker -> Storage : Update comment replyStatus to 'DONE'
ServiceWorker -> UI : sendMessage({ type: 'STATE_UPDATE', ... })
UI -> User : Updates progress stepper for comment
@enduml