@startuml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml

title Container Diagram for LinkedIn Engagement Assistant

Person(user, "LinkedIn User", "Operates the extension.")
System(linkedin, "LinkedIn Web App", "The host web application.")
System_Ext(openrouter, "OpenRouter AI", "External AI service.")

System_Boundary(ext_boundary, "LinkedIn Engagement Assistant") {
    Container(sidebar_ui, "Sidebar UI", "Preact/TS, Shadow DOM", "The user-facing interface for control, configuration, and monitoring. Injected into the LinkedIn page.")
    Container(dom_interactor, "DOM Interactor", "TypeScript, Web APIs", "A content script responsible for all direct DOM manipulation: scrolling, parsing selectors, clicking buttons, and typing text.")
    Container(orchestrator, "Orchestration Service", "Service Worker (JS/TS)", "The core background process. Manages the state machine, processing pipeline, API calls, and persistence.")
    ContainerDb(storage, "Browser Storage", "Chrome Storage API", "Stores user configuration (sync) and per-post processing state (local).")
}

Rel(user, sidebar_ui, "Uses")
Rel(sidebar_ui, orchestrator, "Sends commands (Start/Stop) and receives real-time updates (logs, counts)", "chrome.runtime messages")

Rel(orchestrator, dom_interactor, "Issues commands (e.g., 'scroll', 'get_comment_text', 'click_like')", "chrome.tabs messages")
Rel_Back(orchestrator, dom_interactor, "Receives results from DOM operations")

Rel(dom_interactor, linkedin, "Reads from and writes to", "DOM API")

Rel(orchestrator, storage, "Reads/Writes", "chrome.storage API")
Rel(orchestrator, openrouter, "Fetches models and generates text", "HTTPS/JSON API")
@enduml